--Practice--

--subqueries
SELECT NAME FROM INGREDIENTS
WHERE VENDORID = (
SELECT VENDORID FROM VENDORS
WHERE COMPANYNAME='VEGGIES_R_US');

--in
SELECT NAME FROM INGREDIENTS
WHERE VENDORID IN (
SELECT VENDORID FROM VENDORS
WHERE COMPANYNAME='VEGGIES_R_US' OR COMPANYNAME='SPRING WATER SUPPLY');

SELECT AVG(UNITPRICE) AS "AVGPRICE" FROM INGREDIENTS
WHERE VENDORID = (
SELECT VENDORID FROM VENDORS 
WHERE COMPANYNAME='VEGGIES_R_US');

--between
SELECT NAME FROM INGREDIENTS
WHERE INVENTORY BETWEEN 0.75*AVG(INVENTORY) AND 1.25*AVG(INVENTORY); --check (should select always be there with aggregates?) --or

SELECT NAME FROM INGREDIENTS
WHERE INVENTORY BETWEEN
(SELECT AVG(INVENTORY)*0.75 FROM INGREDIENTS) AND
(SELECT AVG(INVENTORY)*1.25 FROM INGREDIENTS);

SELECT COMPANYNAME FROM VENDORS
WHERE (REFERREDBY IN
(SELECT VENDORID FROM VENDORS
WHERE COMPANYNAME='VEGGIES_R_US'))
AND
(VENDORID IN (
SELECT V.VENDORID FROM VENDORS V,INGREDIENTS I
WHERE V.VENDORID=I.VENDORID AND FOODGROUP='MILK')); --or

SELECT V1.COMPANYNAME FROM VENDORS V1,VENDORS V2
WHERE V1.REFERREDBY=V2.VENDORID AND V2.COMPANYNAME='VEGGIES_R_US'
INTERSECT
SELECT V.COMPANYNAME FROM VENDORS V,INGREDIENTS I
WHERE V.VENDORID=I.VENDORID AND FOODGROUP='MILK';

--multi-level subquery nesting
SELECT NAME,PRICE FROM ITEMS
WHERE ITEMID IN (
SELECT ITEMID FROM MADEWITH
WHERE INGREDIENTID IN (
SELECT INGREDIENTID FROM INGREDIENTS
WHERE VENDORID IN (
SELECT VENDORID FROM VENDORS
WHERE COMPANYNAME='VEGGIES_R_US')));

SELECT STOREID,SUM(PRICE) AS "SALES" FROM ORDERS
WHERE ITEMID IN (
SELECT ITEMID FROM MADEWITH
WHERE INGREDIENTID IN (
SELECT INGREDIENTID FROM INGREDIENTS
WHERE VENDORID IN (
SELECT VENDORID FROM VENDORS
WHERE COMPANYNAME='VEGGIES_R_US')))
GROUP BY STOREID
HAVING COUNT(*)>2
ORDER BY SALES DESC;

--not in
SELECT NAME FROM INGREDIENTS
WHERE VENDORID NOT IN (
SELECT VENDORID FROM VENDORS
WHERE COMPANYNAME='VEGGIES_R_US');

SELECT COMPANYNAME FROM VENDORS
WHERE VENDORID NOT IN (
SELECT VENDORID FROM INGREDIENTS
WHERE INVENTORY>100 AND VENDORID IS NOT NULL);

--empty results

--combining join and subqueries
SELECT NAME,PRICE FROM ITEMS I JOIN MADEWITH MW ON I.ITEMID=MW.ITEMID
WHERE INGREDIENTID IN (
SELECT INGREDIENTID FROM INGREDIENTS ING JOIN VENDORS V ON ING.VENDORID=V.VENDORID
WHERE COMPANYNAME='VEGGIES_R_US');

--any,some,all
SELECT NAME FROM ITEMS
WHERE PRICE > ANY (
SELECT PRICE FROM ITEMS
WHERE NAME LIKE '%SALAD');

SELECT NAME FROM INGREDIENTS
WHERE INGREDIENTID NOT IN (
SELECT INGREDIENTID FROM INGREDIENTS
WHERE VENDORID = ANY (
SELECT VENDORID FROM VENDORS
WHERE COMPANYNAME='VEGGIES_R_US' OR COMPANYNAME='SPRING WATER SUPPLY'));

SELECT NAME FROM INGREDIENTS 
WHERE UNITPRICE >= ALL (
SELECT UNITPRICE FROM INGREDIENTS
WHERE NAME LIKE '%SALAD');

SELECT *    FROM items  WHERE price >= ALL    (SELECT price  FROM items); 

--correlated subqueries

SELECT NAME FROM ITEMS
WHERE (
SELECT COUNT(*) FROM MADEWITH
WHERE MADEWITH.ITEMID=ITEMS.ITEMID)>=3;

SELECT VENDORID,COMPANYNAME FROM VENDORS V1
WHERE (
SELECT COUNT(*) FROM VENDORS V2
WHERE V2.REFERRREDBY=V1.VENDORID)>=2;

--exists
SELECT NAME FROM MEALS M
WHERE  EXISTS (
SELECT * FROM PARTOF P JOIN MADEWITH M ON P.ITEMID=M.ITEMID JOIN INGREDIENTS I ON I.INGREDIENTID=M.INGREDIENTID
WHERE I.FOODGROUP='MILK' AND M.MEALID=P.MEALID);

SELECT VENDORID,COMPANYNAME FROM VENDORS V1
WHERE NOT EXISTS (
SELECT * FROM VENDORS V2
WHERE V2.REFERREDBY=V1.VENDORID);

--derived relations
--subqueries in from clause
SELECT NAME,COMPANYNAME,VAL FROM VENDORS V,(
SELECT NAME,VENDORID,INVENTORY*UNITPRICE AS "VAL" FROM INGREDIENTS I
WHERE FOODGROUP IN ('FRUIT','VEGETABLE')) D
WHERE D.VENDORID=V.VENDORID;

--subqueries in having clause
SELECT COMPANYNAME FROM VENDORS V,INGREDIENTS I
WHERE I.VENDORID=V.VENDORID
GROUP BY V.VENDORID,COMPANYNAME
HAVING COUNT(*)>(
SELECT COUNT(*) FROM INGREDIENTS I,VENDORS V
WHERE I.VENDORID=V.VENDORID AND COMPANYNAME='SPRING WATER SUPPLY');

SELECT V.VENDORID,AVG(INVENTORY*UNITPRICE) AS "AVG_INV" FROM VENDORS V,INGREDIENTS I
WHERE V.VENDORID=I.VENDORID
GROUP BY V.VENDORID
HAVING EXISTS (
SELECT * FROM VENDORS V2
WHERE V2.REFERREDBY=V.VENDORID);

--division operation
--using set operations
SELECT NAME,COMPANYNAME FROM ITEMS I1,VENDORS V1
WHERE NOT EXISTS
(SELECT INGREDIENTID FROM MADEWITH 
WHERE I1.ITEMID=I2.ITEMID)
EXCEPT
(SELECT INGREDIENTID FROM INGREDIENTS ING
WHERE ING.VENDORID=V1.VENDORID);

--comparing relational cardinality
SELECT NAME,COMPANYNAME FROM VENDORS V,ITEMS I
WHERE
(SELECT COUNT(DISTINCT INGREDIENTID) FROM MADEWITH MW
WHERE I.ITEMID=MW.ITEMID)
=
(SELECT COUNT(DISTINCT INGREDIENTID) FROM INGREDIENTS ING
WHERE ING.VENDORID=V.VENDORID);

--subqueries in select clause
SELECT NAME,INVENTORY*UNITPRICE AS "VAL",(SELECT MAX(INVENTORY*UNITPRICE) FROM INGREDIENTS) AS "MAX_VAL",(INVENTORY*UNITPRICE)/(SELECT AVG(INVENTORY*UNITPRICE) FROM INGREDIENTS) AS "RATIO" FROM INGREDIENTS;

SELECT NAME,(SELECT COMPANYNAME FROM VENDORS V
WHERE V.VENDORID=ING.VENDORID) AS "SUPPLIER" FROM INGREDIENTS ING;