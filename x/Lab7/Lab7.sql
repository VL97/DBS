--Practice--

--ex1
CREATE FUNCTION NO_OF_EMP()
RETURNS INTEGER
AS
BEGIN
	DECLARE @COUNT INTEGER;
	SELECT @COUNT = COUNT(*) FROM EMPLOYEES;
	RETURN @COUNT;
END

SELECT DBO.NO_OF_EMP() AS 'NO_OF_EMP';

--ex2
CREATE FUNCTION MAXIMUM(@X INTEGER,@Y INTEGER)
RETURNS INTEGER
AS
BEGIN
	DECLARE @Z INTEGER;
	IF(@X>@Y)
		SET @Z=@X;
	ELSE
		SET @Z=@Y;
	RETURN @Z;
END

SELECT DBO.MAXIMUM(5,10) AS 'MAXIMUM';

--ex3:recursive factorial
CREATE FUNCTION REC_FACTORIAL(@X INTEGER)
RETURNS INTEGER
AS
BEGIN
	IF(@X=0)
		RETURN 1;
	RETURN @X*DBO.REC_FACTORIAL(@X-1);
END

SELECT DBO.REC_FACTORIAL(5) AS "FACTORIAL";

--ex4:iterative factorial
DROP FUNCTION ITER_FACTORIAL;

CREATE FUNCTION ITER_FACTORIAL(@X INTEGER)
RETURNS INTEGER
AS 
BEGIN
	DECLARE @I INTEGER=1, @Z INTEGER=1;
	WHILE(@I<=@X)
	BEGIN
		SET @Z = @Z*@I;
		SET @I = @I+1;
	END
	RETURN @Z;
END

SELECT DBO.ITER_FACTORIAL(5) AS "FACTORIAL";

SELECT * FROM EMPLOYEES;

--Exercise 1--
--1
CREATE FUNCTION PROJ_DETAILS(@IDNO INTEGER)
RETURNS @PROJECTS1 TABLE(
PROJECTID CHAR(8) NOT NULL,
DEPTCODE CHAR(5),
DESCRIPTION VARCHAR(200),
STARTDATE DATE,
ENDDATE DATE,
REVENUE NUMERIC(12,2)
)
AS
BEGIN
	INSERT INTO @PROJECTS1
	SELECT * FROM PROJECTS 
	WHERE PROJECTID IN (
	SELECT PROJECTID FROM WORKSON 
	WHERE EMPLOYEEID=@IDNO);
	RETURN;
END

SELECT * FROM WORKSON;

SELECT * FROM DBO.PROJ_DETAILS(5);

--2
CREATE FUNCTION NTH_FIBO(@X INTEGER)
RETURNS INTEGER
AS
BEGIN
	IF(@X=0)
		RETURN 0;
	IF(@X=1)
		RETURN 1;
	RETURN (DBO.NTH_FIBO(@X-1)+DBO.NTH_FIBO(@X-2));
END

SELECT DBO.NTH_FIBO(5) AS "NTH_FIBO";

--3
DROP FUNCTION NTH_FIBO_I;

CREATE FUNCTION NTH_FIBO_I(@N INTEGER)
RETURNS @FIB TABLE(
FIBONACCI INTEGER)
AS
BEGIN
	DECLARE @A INTEGER=1,@B INTEGER=1,@C INTEGER;
	IF(@N<=2)
		SET @C = @N;
	ELSE
		SET @C = 2;
	WHILE(@C>=1)
	BEGIN
		INSERT INTO @FIB
		SELECT 1;
		SET @C = @C-1;
	END;
	WHILE(@N>2)
	BEGIN
		INSERT INTO @FIB
		SELECT @A+@B;

		SET @C = @A+@B;
		SET @A = @B;
		SET @B = @C;
		SET @N = @N-1;
	END
	RETURN;
END

SELECT * FROM DBO.NTH_FIBO_I(5);

--Practice--
--procedures

--ex1
CREATE PROCEDURE FINDMIN(@X INTEGER,@Y INTEGER,@Z INTEGER OUTPUT)
AS
BEGIN
	IF(@X<@Y)
		SET @Z=@X;
	ELSE
		SET @Z=@Y;
END

DECLARE @A INTEGER,@B INTEGER,@C INTEGER,@D INTEGER;
BEGIN
	SET @A=10;
	SET @B=20;
	EXEC FINDMIN @A,@B,@C OUTPUT;
	SET @D=@C;
	PRINT('THE MIN OF '+CAST(@A AS VARCHAR)+' AND '+CAST(@B AS VARCHAR)+' IS '+CAST(@C AS VARCHAR));
END

--ex2
CREATE PROCEDURE SQ(@A INTEGER OUTPUT)
AS
BEGIN
	SET @A=@A*@A;
END

DECLARE
	@A INTEGER=6;
BEGIN
	EXEC SQ @A OUTPUT;
	PRINT(@A);
END

--cursor
SELECT * FROM INGREDIENTS;

DECLARE INGREDIENTS_CURSOR CURSOR
FOR SELECT * FROM INGREDIENTS;

OPEN INGREDIENTS_CURSOR;

FETCH NEXT FROM INGREDIENTS_CURSOR;

CLOSE INGREDIENTS_CURSOR;

DEALLOCATE INGREDIENT_CURSOR;

--ex1
DECLARE INGREDIENT_CURSOR CURSOR
FOR SELECT INGREDIENTID,NAME,UNIT FROM INGREDIENTS 
	WHERE UNIT IS NOT NULL;

DECLARE @ID VARCHAR(5),
@NAME VARCHAR(30),
@UNIT VARCHAR(10);

OPEN INGREDIENT_CURSOR;

FETCH NEXT FROM INGREDIENT_CURSOR INTO @ID,@NAME,@UNIT;
WHILE(@@FETCH_STATUS=0)
BEGIN
	PRINT(@ID+' '+@NAME+' '+@UNIT);
	FETCH NEXT FROM INGREDIENT_CURSOR INTO @ID,@NAME,@UNIT;
END

CLOSE INGREDIENT_CURSOR;

--Exercise 2--
--1
DECLARE EMP_CURSOR CURSOR
FOR SELECT * FROM EMPLOYEES
	WHERE LASTNAME LIKE '____WARE';

DECLARE 
	@EMPLOYEEID VARCHAR(10),
	@FIRSTNAME VARCHAR(10),
	@LASTNAME VARCHAR(20),
	@DEPTCODE VARCHAR(5),
	@SALARY VARCHAR(30);

OPEN EMP_CURSOR;

FETCH NEXT FROM EMP_CURSOR INTO @EMPLOYEEID,@FIRSTNAME,@LASTNAME,@DEPTCODE,@SALARY;
WHILE(@@FETCH_STATUS=0)
BEGIN
	PRINT(ISNULL(@EMPLOYEEID,' ')+' '+ISNULL(@FIRSTNAME,' ')+' '+ISNULL(@LASTNAME,' ')+' '+ISNULL(@DEPTCODE,' ')+' '+ISNULL(@SALARY,' '));
	FETCH NEXT FROM EMP_CURSOR INTO @EMPLOYEEID,@FIRSTNAME,@LASTNAME,@DEPTCODE,@SALARY;
END

CLOSE EMP_CURSOR;

DEALLOCATE EMP_CURSOR;

--2
DECLARE EMP_CURSOR CURSOR
FOR SELECT EMPLOYEEID,LASTNAME FROM EMPLOYEES
	WHERE DEPTCODE='ACCNT' AND SALARY<30000;

DECLARE
	@EMPLOYEEID VARCHAR(10),
	@LASTNAME VARCHAR(30);

OPEN EMP_CURSOR;

WHILE(1=1)
BEGIN
	FETCH NEXT FROM EMP_CURSOR INTO @EMPLOYEEID,@LASTNAME;
	IF(@@FETCH_STATUS<>0)
	BEGIN
		BREAK;
	END
	PRINT(ISNULL(@EMPLOYEEID,' ')+' '+ISNULL(@LASTNAME,' '));
END

CLOSE EMP_CURSOR;

DEALLOCATE EMP_CURSOR;

SELECT EMPLOYEEID,LASTNAME FROM EMPLOYEES
WHERE DEPTCODE='ACCNT' AND SALARY<30000; --test

SELECT * FROM EMPLOYEES; --test

--3
DECLARE EMP_CURSOR CURSOR
FOR SELECT FIRSTNAME,LASTNAME FROM EMPLOYEES E
WHERE DEPTCODE IN (
SELECT CODE FROM DEPARTMENTS
WHERE NAME='CONSULTING')
AND((SELECT ASSIGNEDTIME FROM WORKSON W1
WHERE W1.EMPLOYEEID=E.EMPLOYEEID AND PROJECTID='ADT4MFIA')/ 
(SELECT SUM(ASSIGNEDTIME) FROM WORKSON W2
GROUP BY EMPLOYEEID
HAVING W2.EMPLOYEEID=E.EMPLOYEEID))*100>20;

DECLARE
	@FIRSTNAME VARCHAR(20),
	@LASTNAME VARCHAR(20);

OPEN EMP_CURSOR;

WHILE(1=1)
BEGIN
	FETCH NEXT FROM EMP_CURSOR INTO @FIRSTNAME,@LASTNAME;
	IF(@@FETCH_STATUS<>0)
		BREAK;
	PRINT(ISNULL(@FIRSTNAME,' ')+' '+ISNULL(@LASTNAME,' '));
END

CLOSE EMP_CURSOR;
DEALLOCATE EMP_CURSOR;

--4
DECLARE EMP_CURSOR CURSOR
FOR SELECT FIRSTNAME,LASTNAME FROM EMPLOYEES
	WHERE SALARY>ANY(
	SELECT SALARY FROM EMPLOYEES
	WHERE DEPTCODE IN (
	SELECT CODE FROM DEPARTMENTS
	WHERE NAME='ACCOUNTING'));

DECLARE
	@FIRSTNAME VARCHAR(20),
	@LASTNAME VARCHAR(20);

OPEN EMP_CURSOR;

WHILE(1=1)
BEGIN
	FETCH NEXT FROM EMP_CURSOR INTO @FIRSTNAME,@LASTNAME;
	IF(@@FETCH_STATUS<>0)
		BREAK;
	PRINT(ISNULL(@FIRSTNAME,' ')+ISNULL(@LASTNAME,' '));
END

CLOSE EMP_CURSOR;
DEALLOCATE EMP_CURSOR;

--Practice--
--type
CREATE TYPE BOOKS AS TABLE(
TITLE VARCHAR(50),
AUTHOR VARCHAR(100),
SUBJECT VARCHAR(100),
BOOK_ID INT);

BEGIN
DECLARE
	@BOOK1 DBO.BOOKS,
	@BOOK2 DBO.BOOKS;
INSERT INTO @BOOK1(TITLE,AUTHOR,SUBJECT,BOOK_ID)
VALUES('TSQL for dummies'  , 'Vighnesh Hegde' , 'Database Systems' , 123456);

INSERT INTO @BOOK2(TITLE,AUTHOR,SUBJECT,BOOK_ID)
VALUES('Advanced T-SQL'  , 'Anmol Naugaria' , 'Database Systems' , 654321);

SELECT * FROM @BOOK1;
SELECT * FROM @BOOK2;
END